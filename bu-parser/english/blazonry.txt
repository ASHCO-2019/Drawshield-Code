#
# The definition of the language of blazonry in a variant Backas-Naur Form (BNF)
#
# Differences from BNF are:
#
# * non-terminals do not have to be surrounded by angle brackets (but can be)
# * There are various flags available, which can appear before or after the symbol
#   The symbol / can be used to separate the symbol from its flags if preferred
# 
# Flags that modify production rules
# * symbols flagged with ? are optional
# * symbols flagged with * can appear more than once
# 
# Flags that affect the parsing process but can generally be ignored
# * symbols flagged with ^ are discarded from the parse tree once found
# * The flag = causes its attributes to be copied up to the parent node
#		and the symbol is then discarded

#############
# Punctuation  
#############

andd		::= t-andd t-comma | \
				t-comma t-andd | \
				t-andd | \
				t-comma
semi2		::= t-semicolon t-semicolon
semi1		::=	t-semicolon

#############
# Tinctures  
#############
# TODO can't remember how grady is supposed to work
treatment 	::= t-treatment2 colour ?andd^ colour | \
				colour t-treatment2 colour | \
				t-treatment1 colour
fur 		::= t-fur=
colour		::= t-colour=
proper		::= t-proper=
backref		::= t-backref  # expand this?
counter		::= t-counterchange
semy		::= t-semy ?t-wordof charge

tincture 	::= treatment | fur | colour | proper | backref | counter | semy


#############
# Divisions
#############
div-type3	::=	t-division3 tincture ?andd^ tincture ?andd^ tincture | \
				t-division3x tincture ?andd^ tincture ?andd^ tincture
counterdiv	::= div-type2 t-division2 counter  # test / expand this
div-type2	::= t-division2 tincture ?andd^ tincture  | \
				t-division3x tincture ?andd^ tincture

div-mod 	::= t-divmods ?andd^ | t-linetype ?andd^ | t-orientation ?andd^


division 	::= div-type2 ?div-mod* | \
			 	div-type3 ?div-mod* | \
			 	counterdiv


#############
# Ordinaries
#############
ord-mod		::= t-ordmods ?andd^ | | t-linetype ?andd^ | t-orientation ?andd^ | \
				t-colour-mod ?andd^ | t-voided ?andd^ | t-ordprefix ?andd^


ord-type1	::= t-number1 ?ordprefix t-ordinary1= | \
				t-number1 ?ordprefix t-ordinaryconf= | \
				t-number1 ?ordprefix t-ordorcharge= 
ord-type2	::= t-number1 ?ordprefix t-ordinary2= | \
				t-number2 ?ordprefix t-ordinary2= 
ord-type3	::= t-number1 ?ordprefix t-ordinary3= | \
				t-number2 ?ordprefix t-ordinary3= | \
				t-number3 ?ordprefix t-ordinary3= 

ord-type	::= ord-type1= | ord-type2= | ord-type3=
ordinary	::=	ord-type= tincture ?ordmods ?semi1^ | \
				ord-type= ?ordmods tincture ?semi1^

on-ordinary	::= t-wordon ordinary charge | \
				t-wordon ordinary ordinary

#############
# Simple Charges (for now)
#############

charge		::= t-number2 t-charge2x= tincture | \
				anynumber t-charge2x= tincture | \
				anynumber t-charge= tincture

anynumber	::= t-number1= | t-number2= | t-number3= | t-numberx=

#############
# Objects (on the field)
#############
object		::= charge | ordinary | on-ordinary

objects		::= object*

#############
# Field
#############
field		::= tincture | division

#############
# Overall (a simple shield)
#############
overall		::= t-overall objects


#############
# Simple shield
#############

simpleshield ::= field objects ?overall | \
				 field

#############
# Quarterings
#############

quartermarker	::= ?t_wordthe^ t_quarters ?t_quartermark^ | \
					?t_wordthe^ anynumber t_quartermark^ | \
					?t_wordthe^ t-letters t_quartermark^

##########################
# Look for some common errors
##########################
# If we didn't find a legitimate reduction above, look for some common errors
# This is not wasteful as they are only processed if there is no match above

bad-division ::= t-division2 tincture | \
				 t-division2 | \
				 t-division3 tincture ?andd^ tincture | \
				 t-division3 ! Wrong number of tinctures for division

bad-treatment ::= t-treatment2 colour | \
				  colour t-treatment 2 | \
				  t-treatment2 |\
				  t-treatment1 ! Wrong number of colours for treatment





    
    

